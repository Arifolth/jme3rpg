/*
 * Copyright (c) 2012, Andreas Olofsson
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met:
 * 
 * Redistributions of source code must retain the above copyright notice, 
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright notice, 
 * this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package se.jod.biomonkey.random;

import java.security.SecureRandom;
import se.jod.biomonkey.paging.grid.Cell2D;

/**
 * This class is used to produce random number seeds.
 * 
 * @author Andreas
 */
public class RandomTable {
    
    protected long worldSeed = Long.MAX_VALUE;
    protected FastRandom rand = new FastRandom();
    
    public RandomTable(){
        
    }
    
    /**
     * Generates a unique long-value for each block. This value is used to
     * seed the planting algorithms. Maximum page resolution is 64.
     *
     * @param loc The xz location as a Vector3f object.
     * @return A long.
     */
    synchronized
    public long lookup(Cell2D page, Cell2D block, int ID){
        long pageHash = page.hashCode();
        long blockHash = block.getX() + 64*block.getZ();
        long id = ID << 20;
        long val = pageHash + blockHash + id;
        return f(val);
    }
    
    /**
     * Offset the table. This value will re-seed the random table
     * with the given value. This method should not be called after
     * the lookup method has been called, as it will change all values
     * generated by that method.
     * 
     * @param offset A long value used to re-seed the generator.
     */
    synchronized
    public void offsetTable(long offset){
        worldSeed = offset;
    }
    
    /**
     * Offset by a new random 64 bit number.
     */
    synchronized
    public long offsetTable(){
        SecureRandom rand = new SecureRandom();
        byte[] b = rand.generateSeed(8);
        long seed = 0;
        long byteVal;
        for(int j = 0; j < 8; j++){
            byteVal = 0;
            for(int i = 0; i < 8; i++){
                byteVal |= (long)(b[j] & (1 << i));
            }
            seed |= byteVal << (j << 3);
        }
        worldSeed = seed;
        return seed;
    }

    public long getWorldSeed() {
        return worldSeed;
    }
    
    // Distort the starting values a little.
    protected long f(long x){
        rand.reSeed(x);
        rand.nextLong();
        rand.nextLong();
        rand.nextLong();
        rand.nextLong();
        rand.nextLong();
        rand.nextLong();
        rand.nextLong();
        rand.nextLong();
        rand.nextLong();
        return rand.nextLong();
    }
}
